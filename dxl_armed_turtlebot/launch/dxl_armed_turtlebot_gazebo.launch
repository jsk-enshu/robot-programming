<launch>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="world_file" default="$(find dxl_armed_turtlebot)/worlds/empty.world" />
  <arg name="model" value="$(find dxl_armed_turtlebot)/urdf/robot.urdf.xacro"  />

  <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  <node name="cmd_vel_renamer" pkg="topic_tools" type="relay"
        args=" /cmd_vel /mobile_base/commands/velocity" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find dxl_armed_turtlebot)/config/dxl_armed_turtlebot.rviz"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        respawn="false" output="screen"
        args="-x 0.0 -y 0.0 -z 0.01 -unpause -urdf -model dxl_armed_turtlebot
              -param robot_description" />

  <!-- copied turtlebot_bringup/launch/3dsensor.launch, included from dxl_armed_turtlebot_bringup.launch -->
  <arg name="camera"     default="camera"/>
  <arg name="scan_topic" default="scan"/>
  <arg name="depth"      default="depth" />
  <!--                        Laserscan
       This uses lazy subscribing, so will not activate until scan is requested.
  -->
  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" >
    <!-- Pixel rows to use to generate the laserscan. For each column, the scan will
         return the minimum value for those pixels centered vertically in the image. -->
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/$(arg camera)_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="$(arg camera)/$(arg depth)/image_raw"/>
    <remap from="scan" to="$(arg scan_topic)"/>

    <!-- Somehow topics here get prefixed by "$(arg camera)" when not inside an app namespace,
         so in this case "$(arg scan_topic)" must provide an absolute topic name (issue #88).
         Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
    <remap from="$(arg camera)/image" to="$(arg camera)/$(arg depth)/image_raw"/>
    <remap from="$(arg camera)/scan" to="$(arg scan_topic)"/>
  </node>

  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <!-- load the controllers -->
  <rosparam file="$(find dxl_armed_turtlebot)/config/dxl_armed_turtlebot_controllers.yaml" />
  <node name="controller_spawner" pkg="controller_manager"
        type="spawner" respawn="false"
        output="screen"
        args="joint_state_controller
              fullbody_controller
              gripper_controller
              "/>
  <!-- send tuck pose -->
  <node name="tuck_arm" pkg="dxl_armed_turtlebot" type="tuck_arm.py" args="-t" />
</launch>
